

#ifndef EPD_BASE_H
#define EPD_BASE_H

#include "epdif.h"

#define UWORD   unsigned int
#define UBYTE   unsigned char
#define UDOUBLE unsigned long

#define QRDIM 32
const uint8_t wifi_qrcode_32x32_data[] = {
    0x00, 0x00, 0x00, 0x00, 0x7F, 0x4F, 0x09, 0xFC, 0x41, 0x31, 0x2D, 0x04, 0x5D, 0x17, 0x49, 0x74, 0x5D, 0x06, 0x89, 0x74, 0x5D, 0x2B, 0x29, 0x74, 0x41, 0x17, 0x45, 0x04, 0x7F, 0x55, 0x55, 0xFC, 0x00, 0x5A, 0x0C, 0x00, 0x6D, 0x39, 0xA1, 0x04, 0x64, 0x67, 0x3A, 0x44, 0x7F, 0x9A, 0xF7, 0x30, 0x06, 0x7C, 0xE0, 0xC0, 0x0D, 0x2C, 0x29, 0x44, 0x22, 0xE3, 0x91, 0xE0, 0x2F, 0x6D, 0xE9, 0xB4, 0x32, 0x49, 0x5F, 0x3C, 0x75, 0xF6, 0xC0, 0x3C, 0x48, 0x7E, 0x9E, 0xE4, 0x6D, 0x5B, 0xBB, 0x74, 0x7E, 0x3E, 0x48, 0x7C, 0x6D, 0x69, 0x8F, 0xD4, 0x00, 0x4D, 0xA4, 0x4C, 0x7F, 0x2A, 0x8D, 0x40, 0x41, 0x15, 0x2C, 0x60, 0x5D, 0x60, 0xAF, 0xD0, 0x5D, 0x6D, 0xCE, 0x54, 0x5D, 0x33, 0xBA, 0xDC, 0x41, 0x70, 0x09, 0x74, 0x7F, 0x7E, 0x8C, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

const unsigned int wifi_qrcode_32x32_size = 128;

// // Image size: 64x64 pixels
// const uint8_t wifi_qrcode_64x64_data[] = {
//     0xFF, 0xFE, 0x30, 0xFF, 0x80, 0x30, 0x7F, 0xFF, 0xFF, 0xFE, 0x30, 0xFF, 0x80, 0x30, 0x7F, 0xFF, 0xC0, 0x06, 0x0F, 0x01, 0x83, 0x3C, 0x60, 0x03, 0xC0, 0x06, 0x0F, 0x01, 0x83, 0x3C, 0x60, 0x03, 0xCF, 0xE6, 0x03, 0x3F, 0x9C, 0x30, 0x67, 0xF3, 0xCF, 0xE6, 0x03, 0x3F, 0x9C, 0x30, 0x67, 0xF3, 0xCF, 0xE6, 0x03, 0x3F, 0x9C, 0x30, 0x67, 0xF3, 0xCF, 0xE6, 0x00, 0x3E, 0x60, 0x30, 0x67, 0xF3, 0xCF, 0xE6, 0x00, 0x3E, 0x60, 0x30, 0x67, 0xF3, 0xCF, 0xE6, 0x0C, 0xC7, 0x83, 0x30, 0x67, 0xF3, 0xCF, 0xE6, 0x0C, 0xC7, 0x83, 0x30, 0x67, 0xF3, 0xC0, 0x06, 0x03, 0x3F, 0x9C, 0x0C, 0x60, 0x03, 0xC0, 0x06, 0x03, 0x3F, 0x9C, 0x0C, 0x60, 0x03, 0xFF, 0xFE, 0x33, 0x39, 0x9C, 0xCC, 0x7F, 0xFF, 0xFF, 0xFE, 0x33, 0x39, 0x9C, 0xCC, 0x7F, 0xFF, 0x00, 0x00, 0x33, 0xC6, 0x00, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x33, 0xC6, 0x00, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x33, 0xC6, 0x00, 0x3C, 0x00, 0x00, 0xF1, 0xE6, 0x0F, 0xC1, 0xE3, 0x00, 0x60, 0x03, 0xF1, 0xE6, 0x0F, 0xC1, 0xE3, 0x00, 0x60, 0x03, 0xF0, 0x60, 0x3C, 0x3F, 0x83, 0xF3, 0x86, 0x03, 0xF0, 0x60, 0x3C, 0x3F, 0x83, 0xF3, 0x86, 0x03, 0xFF, 0xFF, 0xC3, 0xC6, 0x7F, 0xCF, 0xE1, 0xF0, 0xFF, 0xFF, 0xC3, 0xC6, 0x7F, 0xCF, 0xE1, 0xF0, 0x00, 0x78, 0x3F, 0xF8, 0x7F, 0x00, 0x1E, 0x00, 0x00, 0x78, 0x3F, 0xF8, 0x7F, 0x00, 0x1E, 0x00, 0x01, 0xE6, 0x0C, 0xF8, 0x03, 0x30, 0x66, 0x03, 0x01, 0xE6, 0x0C, 0xF8, 0x03, 0x30, 0x66, 0x03, 0x01, 0xE6, 0x0C, 0xF8, 0x03, 0x30, 0x66, 0x03, 0x30, 0x19, 0xFC, 0x07, 0xE0, 0xC0, 0x7F, 0x80, 0x30, 0x19, 0xFC, 0x07, 0xE0, 0xC0, 0x7F, 0x80, 0x31, 0xFE, 0x3C, 0xF9, 0xFF, 0x30, 0x79, 0xF3, 0x31, 0xFE, 0x3C, 0xF9, 0xFF, 0x30, 0x79, 0xF3, 0x3E, 0x18, 0x30, 0xC1, 0x9C, 0xFF, 0xE1, 0xFF, 0x3E, 0x18, 0x30, 0xC1, 0x9C, 0xFF, 0xE1, 0xFF, 0xFE, 0x67, 0xFF, 0x3E, 0x7C, 0x00, 0x01, 0xFF, 0xFE, 0x67, 0xFF, 0x3E, 0x7C, 0x00, 0x01, 0xFF, 0xFE, 0x67, 0xFF, 0x3E, 0x7C, 0x00, 0x01, 0xFF, 0xC1, 0x80, 0x3F, 0xFE, 0x60, 0xFF, 0x9F, 0x83, 0xC1, 0x80, 0x3F, 0xFE, 0x60, 0xFF, 0x9F, 0x83, 0xF1, 0xE6, 0x33, 0xC7, 0xE3, 0xF3, 0xE7, 0xF3, 0xF1, 0xE6, 0x33, 0xC7, 0xE3, 0xF3, 0xE7, 0xF3, 0xFF, 0xF8, 0x0F, 0xFE, 0x1C, 0x30, 0x07, 0xFF, 0xFF, 0xF8, 0x0F, 0xFE, 0x1C, 0x30, 0x07, 0xFF, 0xF1, 0xE6, 0x3C, 0xC1, 0xE0, 0x3F, 0xFE, 0x73, 0xF1, 0xE6, 0x3C, 0xC1, 0xE0, 0x3F, 0xFE, 0x73, 0x00, 0x00, 0x30, 0xF9, 0xE3, 0x0C, 0x06, 0x0F, 0x00, 0x00, 0x30, 0xF9, 0xE3, 0x0C, 0x06, 0x0F, 0x00, 0x00, 0x30, 0xF9, 0xE3, 0x0C, 0x06, 0x0F, 0xFF, 0xFE, 0x0C, 0xC6, 0x60, 0x3C, 0x66, 0x00, 0xFF, 0xFE, 0x0C, 0xC6, 0x60, 0x3C, 0x66, 0x00, 0xC0, 0x06, 0x03, 0x39, 0x83, 0x3C, 0x07, 0x80, 0xC0, 0x06, 0x03, 0x39, 0x83, 0x3C, 0x07, 0x80, 0xCF, 0xE6, 0x3C, 0x00, 0x63, 0x3F, 0xFE, 0x70, 0xCF, 0xE6, 0x3C, 0x00, 0x63, 0x3F, 0xFE, 0x70, 0xCF, 0xE6, 0x3C, 0xF9, 0xFC, 0x3F, 0x86, 0x73, 0xCF, 0xE6, 0x3C, 0xF9, 0xFC, 0x3F, 0x86, 0x73, 0xCF, 0xE6, 0x0F, 0x07, 0xE3, 0xF3, 0x9E, 0x7F, 0xCF, 0xE6, 0x0F, 0x07, 0xE3, 0xF3, 0x9E, 0x7F, 0xCF, 0xE6, 0x0F, 0x07, 0xE3, 0xF3, 0x9E, 0x7F, 0xC0, 0x06, 0x3F, 0x00, 0x00, 0x30, 0x67, 0xF3, 0xC0, 0x06, 0x3F, 0x00, 0x00, 0x30, 0x67, 0xF3, 0xFF, 0xFE, 0x3F, 0xFE, 0x60, 0x3C, 0x1F, 0xF0, 0xFF, 0xFE, 0x3F, 0xFE, 0x60, 0x3C, 0x1F, 0xF0
// };
// const unsigned int wifi_qrcode6_64x64_size = 512;

class Epd : EpdIf {
public:
    unsigned long width;
    unsigned long height;
    unsigned char steps;
    unsigned char stepCommands[4];
    unsigned long blockSize;
    Epd();
    ~Epd();
    int  Init(void);
    void WaitUntilIdle(void);
    void Reset(void);
    void SetLut(void);
     void SetLut_by_host(unsigned char *lut_vcom, unsigned char *lut_ww, unsigned char *lut_bw, unsigned char *lut_wb, unsigned char *lut_bb);
    void SendCommand(unsigned char command);
    void SetToDataMode();
    void SendData(unsigned char data);
    void SendDataFast(unsigned char data);
    void Sleep(void);
    void ClearFrame(void);
    //void Clear();
    void Clear(unsigned char color);
    void TurnOnDisplay(void);
    void QRset(int scale);
    uint8_t get_bit(const uint8_t *array, size_t bit_position);
    void SetFrameStart(char mode, unsigned char command);
    void SendBuffer(unsigned char* buffer, int size);
    bool ShowDebug;
private:
    unsigned int reset_pin;
    unsigned int dc_pin;
    unsigned int cs_pin;
    unsigned int busy_pin;
    unsigned char bits_per_pixel;
    unsigned char pixels_per_byte;
    unsigned char qr_color;

};

#endif /* EPD7IN5B_H */

/* END OF FILE */
